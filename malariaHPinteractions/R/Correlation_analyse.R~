# This script is to accummulate all the outer files
# and analyse them: first sum them up all,
# then find the p-values
# third, get gene pairs with p-values == 0
# fourth, get this from the other study and finc common pairs

loadRData <- function(fileName){
  #loads an RData file, and returns it
  load(fileName)
  get(ls()[ls() != "fileName"])
}

library(WGCNA)
library(reshape2)
library(ggplot2)
library(dplyr)
library(UpSetR)
library(grid)

########### Main operations ###########
studyID <- "df_concat_allhosts"
type <- "all"

sum <- matrix(rep(0, 17991*17991), nrow = 17991)

files <- grep(pattern = "outer_", list.files())
file.names <- list.files()[files]

for(i in 1:length(file.names))
{
  print(i)
  if(grepl(pattern = ".RData", file.names[i]))
  {
    load(file.names[i])
    sum <- sum + outer 
  }
}

#for(i in file.names)
#{
 #   print(i)
  #  load(paste0("ds/", i, collapse = ""))
   # sum <- sum + outer 
  #}
#
study <- loadRData("../df_concat_allhosts.RData")
#study <- loadRData(paste0(studyID,".ortho.data.",type,".RData", collapse = ''))
study <- t(study)
ori_cor <- cor(study, use = "pairwise.complete.obs")
ori_cor[lower.tri(ori_cor, diag = T)] <- NA
cor_melt <- melt(ori_cor)
colnames(cor_melt) <- c("gene1", "gene2", "cor")

pval <- sum
pval[lower.tri(pval, diag = T)] <- NA
pval_melt <- melt(pval)
colnames(pval_melt) <- c("gene1", "gene2", "permute_score")

pval_cor <- cbind(cor_melt, pval_melt$permute_score)
colnames(pval_cor)[4] <- "permute_score"

pval_cor_na.omit <- na.omit(pval_cor)
bipartite_all_ISIGEM <- pval_cor_na.omit[(grepl(pattern = "h_OG", pval_cor_na.omit$gene1) & grepl(pattern = "p_OG", pval_cor_na.omit$gene2)) |
                     (grepl(pattern = "p_OG", pval_cor_na.omit$gene1) & grepl(pattern = "h_OG", pval_cor_na.omit$gene2)),]
                     
pval0 <- pval_cor_na.omit[pval_cor_na.omit$permute_score==0,]

hg_col1 <- as.character(pval0[grep(pattern = "h_OG", pval0$gene1),1])
unique_hg_col1 <- unique(hg_col1)          
hg_col2 <- as.character(pval0[grep(pattern = "h_OG", pval0$gene2),2])
unique_hg_col2 <- unique(hg_col2)
unique_hg <- unique(c(unique_hg_col1, unique_hg_col2))

pg_col1 <- as.character(pval0[grep(pattern = "p_OG", pval0$gene1),1])
unique_pg_col1 <- unique(pg_col1)  
pg_col2 <- as.character(pval0[grep(pattern = "p_OG", pval0$gene2),2])
unique_pg_col2 <- unique(pg_col2)
unique_pg <- unique(c(unique_pg_col1,unique_pg_col2))

bipartite <- pval0[(grepl(pattern = "h_OG", pval0$gene1) & grepl(pattern = "p_OG", pval0$gene2)) |
                     (grepl(pattern = "p_OG", pval0$gene1) & grepl(pattern = "h_OG", pval0$gene2)),]
colnames(bipartite) <- sapply(colnames(bipartite), function(x) paste0(studyID,"_",type,"_",x, collapse = ''))
save(bipartite, file = paste0(studyID,"_", type, "_bipartite.RData", collapse = ''))

para <- pval0[(grepl(pattern = "p_OG", pval0$gene1) & grepl(pattern = "p_OG", pval0$gene2)),]
colnames(para) <- sapply(colnames(para), function(x) paste0(studyID,"_",type,"_",x, collapse = ''))
save(para, file =  paste0(studyID,"_", type, "_para.RData", collapse = ''))

host <- pval0[(grepl(pattern = "h_OG", pval0$gene1) & grepl(pattern = "h_OG", pval0$gene2)),]
colnames(host) <- sapply(colnames(host), function(x) paste0(studyID,"_",type,"_",x, collapse = ''))
save(host, file =  paste0(studyID,"_", type, "_host.RData", collapse = ''))

b_hg_col1 <- as.character(bipartite[grep(pattern = "h_OG", bipartite[,1]),1])
b_unique_hg_col1 <- unique(b_hg_col1)
b_hg_col2 <- as.character(bipartite[grep(pattern = "h_OG", bipartite[,2]),2])
b_unique_hg_col2 <- unique(b_hg_col2)
b_unique_hg <- unique(c(b_unique_hg_col1, b_unique_hg_col2))

b_pg_col1 <- as.character(bipartite[grep(pattern = "p_OG", bipartite[,1]),1])
b_unique_pg_col1 <- unique(b_pg_col1)
b_pg_col2 <- as.character(bipartite[grep(pattern = "p_OG", bipartite[,2]),2])
b_unique_pg_col2 <- unique(b_pg_col2)
b_unique_pg <- unique(c(b_unique_pg_col1, b_unique_pg_col2))

########### Venn diagram of 3 datasets for 1 study #########

all_b <- loadRData("SRP116593_all_bipartite.RData")
int_b <- loadRData("SRP116593_int_bipartite.RData")
str_b <- loadRData("SRP116593_str_bipartite.RData")

all_b_concat <- apply(all_b[,c(1,2)] , 1 , paste , collapse = "_" )
str_b_concat <- apply(str_b[,c(1,2)] , 1 , paste , collapse = "_" )
int_b_concat <- apply(int_b[,c(1,2)] , 1 , paste , collapse = "_" )

intersection_all_datasets <- list(all = all_b_concat, stringent = str_b_concat, intermediate = int_b_concat)

library(VennDiagram)
library(RColorBrewer)
png("SRP116593_intersection_3_datasets.png", width = 50, height = 50, units = "cm", res = 450)
myCol <- brewer.pal(3, "Pastel2")
venn.diagram(
        x = intersection_all_datasets,
        category.names = c("SRP116593_all" , "SRP116593_stringent" , "SRP116593_intermediate"),
        filename = 'SRP116593_venn_diagram.png',
        output=TRUE,
        
        # Output features
        imagetype="png" ,
        height = 480 , 
        width = 480 , 
        resolution = 300,
        compression = "lzw",
        
        # Circles
        lwd = 2,
        lty = 'blank',
        fill = myCol,
        
        # Numbers
        cex = .3,
        fontfamily = "sans",
        
        # Set names
        cat.cex = 0.3,
        cat.default.pos = "outer",
        cat.pos = c(-27, 27, 135),
        cat.dist = c(0.055, 0.055, 0.085),
        cat.fontfamily = "sans",
        rotation = 1
)
dev.off()

########### join two studies correlation values ############

hg_common <- unique(bip_dupl$gene1)
pg_common <- unique(bip_dupl$gene2)

bip_cor1 <- inner_join(bip_dupl, SRP032775_bipartite, by = c("gene1", "gene2"))
bip_cor12 <- inner_join(bip_cor1, SRP118996_bipartite, by = c("gene1", "gene2"))
bip_cor12 <- bip_cor12[,c(1,2,3,5)]

common_all <- inner_join(SRP032775_pval0, SRP118996_pval0, by = c("gene1", "gene2"))
common_hh <- common_all[which(grepl(pattern= "h_OG", common_all$gene1) & grepl(pattern = "h_OG", common_all$gene2)),]
common_pp <- common_all[which(grepl(pattern= "p_OG", common_all$gene1) & grepl(pattern = "p_OG", common_all$gene2)),]

########### perm_score vs cor plot #########

pv = pval_cor_na.omit[sample(nrow(pval_cor_na.omit), size = nrow(pval_cor_na.omit)/1000),]

gg_pvsc <- ggplot(pv, aes(x = cor, y = permute_score)) + geom_point(alpha = 0.7) + theme_bw() +
             ggtitle("df_concat_allhosts: Distribution of permutation score and correlation coef") +
                 xlab("Correlation coefficient [-1, 1]") + ylab("Permutation score of gene pair")

ggsave(plot = gg_pvsc, filename = "df_concat_allhosts.png")

## plot to overlay histograms of edges vs correlation coefs

pval_cor_na.omit_ <- pval_cor_na.omit[sample(nrow(pval_cor_na.omit), size = nrow(pval_cor_na.omit)/1000),]
pval_cor_na.omit_$type <- rep("all", nrow(pval_cor_na.omit_))

pval0_<- pval0[sample(nrow(pval0), size = nrow(pval0)/1000),]
pval0_$type <- rep("all_ISIGEM0", nrow(pval0_))

bipartite_all_ISIGEM_ <- bipartite_all_ISIGEM[sample(nrow(bipartite_all_ISIGEM), size = nrow(bipartite_all_ISIGEM)/1000),]
bipartite_all_ISIGEM_$type <- rep("bipartite", nrow(bipartite_all_ISIGEM_))

bipartite_ <- bipartite[sample(nrow(bipartite), size = nrow(bipartite)/1000),]
bipartite_$type <- rep("bipartite_ISIGEM0", nrow(bipartite_))

edges <- rbind(pval_cor_na.omit_, pval0_, bipartite_all_ISIGEM_, bipartite_)
save(edges, file = "all_bipartite_edges_ISIGEM_0_and_more.RData")

g <- ggplot(edges, aes(x = cor, fill = type)) + geom_freqpoly(alpha=0.25, binwidth = 100)
ggsave(plot = g, filename = "histogram_edges.png")
########### (commented out; improved version below) to plot perm_sc == 0 vs number of perms ###########

# sum2 <- matrix(rep(0, 17991*17991), nrow = 17991)
# sum2[lower.tri(sum2, diag = T)] <- NA
# df <- data.frame(Perms = seq(10000, 100000, 10000))
# a = 1
# for(i in 1:length(file.names))
# {
#   print(i)
#   if(grepl(pattern = ".RData", file.names[i]))
#   {
#   load(file.names[i])
#   #outer[lower.tri(outer, diag = T)] <- NA
#   sum2 <- outer + sum2
#   #sum2[lower.tri(sum2, diag = T)] <- NA
#   sum2_melt <- melt(sum2)
#   
#   colnames(sum2_melt) <- c("gene1", "gene2", "permute_score")
# 
#   pval_cor <- cbind(cor_melt, sum2_melt$permute_score)
#   colnames(pval_cor)[4] <- "permute_score"
# 
#   pval_cor_na.omit <- na.omit(pval_cor)
#   pval0 <- pval_cor_na.omit[pval_cor_na.omit$permute_score==0,]
# 
#   cor0.9 <- nrow(pval0[abs(pval0$cor) >= 0.9,])
#   cor0.8 <- nrow(pval0[(abs(pval0$cor) >= 0.8 & abs(pval0$cor) < 0.9),])
#   cor0.7 <- nrow(pval0[(abs(pval0$cor) >= 0.7 & abs(pval0$cor) < 0.8),])
#   cor0.6 <- nrow(pval0[(abs(pval0$cor) >= 0.6 & abs(pval0$cor) < 0.7),])
#   cor0.5 <- nrow(pval0[(abs(pval0$cor) >= 0.5 & abs(pval0$cor) < 0.6),])
# 
#   df[a,2] <- cor0.9
#   df[a,3] <- cor0.8
#   df[a,4] <- cor0.7
#   df[a,5] <- cor0.6
#   df[a,6] <- cor0.5
#   
#   a = a + 1}
# }
# 
# save(df, file = "SRP118996_hp_12Sep2019df.RData")
# 
# colnames(df) <- c("Permutations", "Cor0.9", "Cor0.8", "Cor0.7", "Cor0.6", "Cor0.5")
# df_melt <- melt(df, id.vars = "Permutations")
# 
# png("SRP032775_hp_100k_12Sep2019.png")
# ggplot(df_melt, aes(x = Permutations, y = log10(value), colour = variable)) + geom_line() +
#        scale_x_continuous(breaks = seq(10000, 100000, 20000), limits = c(10000, 100000)) + 
#        ggtitle("SRP032775: #edges with perm_score zero; para read prop >5%") + 
#        ylab("log10 of number of edges with perm_score == 0")
# dev.off()

########### Number of nodes and edges with permute score 0 at every 100000 step + plots ###########

# For every study, read the outer files, melt them, read the different kinds of edges and nodes
# count these and put then in the table
# Things to count:
# 1. Number of hh edges, pp edges, all edges and bipartite edges
# 2. Number of h nodes, p nodes, h nodes in bipartite edges and p nodes in bipartite edges
# The idea is to pool the numbers together and plot as different facets
# So, for a single study, a matrix will have 
# 10 row to represent 100000 permutations
# cols for 1 and 2., 8 in total
# In ggplot, I would reshape then by the edge type and node type -> 2 groups of facets
# 0.9 10k each is a separate matrix. then rbind them.
# 0.8 10k
# 0.7 10k
# 0.6 10k
# 0.5 10k


number_of_edges_and_nodes <- function(pcc)
{
  sum2 <- matrix(rep(0, 17991*17991), nrow = 17991)
  sum2[lower.tri(sum2, diag = T)] <- NA
  df <- data.frame(Perms = seq(10000, 100000, 10000))
  a = 1
  
  for(i in 1:length(file.names))
  {
    print(i)
    if(grepl(pattern = ".RData", file.names[i]))
    {
      load(file.names[i])
      sum2 <- outer + sum2
      sum2_melt <- melt(sum2)
      
      colnames(sum2_melt) <- c("gene1", "gene2", "permute_score")
      
      pval_cor <- cbind(cor_melt, sum2_melt$permute_score)
      colnames(pval_cor)[4] <- "permute_score"
      
      pval_cor_na.omit <- na.omit(pval_cor)
      pval0 <- pval_cor_na.omit[pval_cor_na.omit$permute_score==0,]
      
      if(pcc >= 0.9){ r1 = 0.9; r2 = 1.0 }
      if(pcc >= 0.8 & pcc < 0.9){ r1 = 0.8; r2 = 0.9 }
      if(pcc >= 0.7 & pcc < 0.8){ r1 = 0.7; r2 = 0.8 }
      if(pcc >= 0.6 & pcc < 0.7){ r1 = 0.6; r2 = 0.7 }
      if(pcc >= 0.5 & pcc < 0.6){ r1 = 0.5; r2 = 0.6 }
      
      all.edges <- pval0[(abs(pval0$cor) >= r1 & abs(pval0$cor) < r2),]
      all.edges.number <- nrow(all.edges)
      hh.edges <- all.edges[(grepl(pattern = "h_OG", as.character(all.edges$gene1)) & grepl(pattern = "h_OG", as.character(all.edges$gene2))),]
      hh.edges.number <- nrow(hh.edges)
      pp.edges <- all.edges[(grepl(pattern = "p_OG", as.character(all.edges$gene1)) & grepl(pattern = "p_OG", as.character(all.edges$gene2))),]
      pp.edges.number <- nrow(pp.edges)
      hp.edges <- all.edges[((grepl(pattern = "h_OG", as.character(all.edges$gene1)) & grepl(pattern = "p_OG", as.character(all.edges$gene2))) | (grepl(pattern = "p_OG", as.character(all.edges$gene1)) & grepl(pattern = "h_OG", as.character(all.edges$gene2)))),]
      hp.edges.number <- nrow(hp.edges)
      
      hh.h.nodes <- unique(c(unique(as.character(hh.edges$gene1))), c(unique(as.character(hh.edges$gene2))))
      pp.p.nodes <- unique(c(unique(as.character(pp.edges$gene1))), c(unique(as.character(pp.edges$gene2))))
      
      hp.h.nodes.col1 <- unique(as.character(hp.edges$gene1))
      # if(length(hp.h.nodes.col1) > 0 & length(hp.h.nodes.col2) > 0)
      #   hp.h.nodes <- unique(hp.h.nodes.col1, hp.h.nodes.col2)
      # if(length(hp.h.nodes.col1) > 0 & length(hp.h.nodes.col2) == 0)
      #   hp.h.nodes <- unique(hp.h.nodes.col1)
      # if(length(hp.h.nodes.col2) > 0 & length(hp.h.nodes.col1) == 0)
      hp.h.nodes <- length(hp.h.nodes.col1)
      
      hp.p.nodes.col1 <- unique(as.character(hp.edges$gene2))
      # hp.p.nodes.col2 <- unique(as.character(grep(pattern = "p_OG",hp.edges$gene2)))
      # if(length(hp.p.nodes.col1) > 0 & length(hp.p.nodes.col2) > 0)
      #   hp.p.nodes <- unique(hp.p.nodes.col1, hp.p.nodes.col2)
      # if(length(hp.p.nodes.col1) > 0 & length(hp.p.nodes.col2) == 0)
      #   hp.p.nodes <- unique(hp.p.nodes.col1)
      # if(length(hp.p.nodes.col2) > 0 & length(hp.p.nodes.col1) == 0)
      hp.p.nodes <- length(hp.p.nodes.col1)
      
      df[a,2] <- pcc
      df[a,3] <- all.edges.number
      df[a,4] <- hh.edges.number
      df[a,5] <- pp.edges.number
      df[a,6] <- hp.edges.number
      df[a,7] <- length(hh.h.nodes)
      df[a,8] <- length(pp.p.nodes)
      df[a,9] <- hp.h.nodes
      df[a,10] <- hp.p.nodes
      
      a = a+1
    }
  }
  return(df)
}
nodes_and_edges <- rbind(number_of_edges_and_nodes(0.9), 
                         number_of_edges_and_nodes(0.8), 
                         number_of_edges_and_nodes(0.7),
                         number_of_edges_and_nodes(0.6),
                         number_of_edges_and_nodes(0.5))

save(nodes_and_edges, file = "df_concat_allhosts_nodes_and_edges.RData")
colnames(nodes_and_edges) <- c("Perms", "cor", "all.edges", "hh.edges", "pp.edges", "hp.edges", "hh.h.nodes", "pp.p.nodes", "hp.h.nodes", "hp.p.nodes")
df_individual_melt <- melt(nodes_and_edges, id = c("Perms", "cor"))
colnames(df_individual_melt) <- c("Perms", "cor", "edge.node.type", "count")

png("Allhosts_edge_node_plot.png", width = 800, height = 500, units = "px")
edge.node.plot <- ggplot(df_individual_melt, aes(x = Perms, y = log10(count), colour = factor(cor))) +
  geom_line() + scale_x_continuous(breaks = seq(10000, 100000, 25000), limits = c(10000, 100000))+
  theme_bw() +
  facet_wrap(. ~ edge.node.type, scales="free_y") + ggtitle("All hosts: Number of edges/nodes with permutation score 0")
dev.off()

ggsave(plot = edge.node.plot, filename = "Allhosts_edge.node.plot.png")

edges.df <- df_individual_melt[grep(pattern = "edge", df_individual_melt$edge.node.type),]
nodes.df <- df_individual_melt[grep(pattern = "node", df_individual_melt$edge.node.type),]

edge.plot <- ggplot(edges.df, aes(x = Perms, y = log10(count), colour = factor(cor))) +
  geom_line() + scale_x_continuous(breaks = seq(10000, 100000, 25000), limits = c(10000, 100000))+
  theme_bw() +
  facet_wrap(. ~ edge.node.type, scales="free_y") + ggtitle("SRP118827_all: Number of edges with permutation score 0") +
  xlab("Permutations")

ggsave(plot = edge.plot, filename = "SRP118827_all_edge.plot.png")

node.plot <- ggplot(nodes.df, aes(x = Perms, y = log10(count), colour = factor(cor))) +               
  geom_line() + scale_x_continuous(breaks = seq(10000, 100000, 25000), limits = c(10000, 100000))+
  theme_bw() +
  facet_wrap(. ~ edge.node.type, scales="free_y") + ggtitle("SRP118827_all: Number of nodes with permutation score 0") +
  xlab("Permutations")


ggsave(plot = node.plot, filename = "SRP118827_all_node.plot.png")


########### find common edges and nodes between the two studies at every 10000 step + plots ###########

# https://stackoverflow.com/questions/5577221/how-can-i-load-an-object-into-a-variable-name-that-i-specify-from-an-r-data-file
loadRData <- function(fileName){
  #loads an RData file, and returns it
  load(fileName)
  get(ls()[ls() != "fileName"])
}

common_edges_and_nodes <- function(pcc)
{
  # monkey init
  mon_sum <- matrix(rep(0, 17991*17991), nrow = 17991)
  mon_sum[lower.tri(mon_sum, diag = T)] <- NA
  # human init
  hum_sum <- matrix(rep(0, 17991*17991), nrow = 17991)
  hum_sum[lower.tri(hum_sum, diag = T)] <- NA
  
  df <- data.frame(Permutations = seq(10000, 100000, 10000))
  a = 1

  for(i in 1:length(mon_file.names))
  {
    print(i)
    
    mon_outer = loadRData(paste0(mon_prefix, mon_file.names[i], collapse = ''))
    mon_sum <- mon_outer + mon_sum
    mon_sum_melt <- melt(mon_sum)
    colnames(mon_sum_melt) <- c("gene1", "gene2", "permute_score")
    mon_pval_cor <- cbind(mon_cor_melt, mon_sum_melt$permute_score)
    colnames(mon_pval_cor)[4] <- "permute_score"
    mon_pval_cor_na.omit <- na.omit(mon_pval_cor)
    mon_pval0 <- mon_pval_cor_na.omit[mon_pval_cor_na.omit$permute_score==0,]
    ####
    
    hum_outer = loadRData(paste0(hum_prefix, hum_file.names[i], collapse = ''))
    hum_sum <- hum_outer + hum_sum
    hum_sum_melt <- melt(hum_sum)
    colnames(hum_sum_melt) <- c("gene1", "gene2", "permute_score")
    hum_pval_cor <- cbind(hum_cor_melt, hum_sum_melt$permute_score)
    colnames(hum_pval_cor)[4] <- "permute_score"
    hum_pval_cor_na.omit <- na.omit(hum_pval_cor)
    hum_pval0 <- hum_pval_cor_na.omit[hum_pval_cor_na.omit$permute_score==0,]
    ####
    
    if(pcc >= 0.9){ r1 = 0.9; r2 = 1.0 }
    if(pcc >= 0.8 & pcc < 0.9){ r1 = 0.8; r2 = 0.9 }
    if(pcc >= 0.7 & pcc < 0.8){ r1 = 0.7; r2 = 0.8 }
    if(pcc >= 0.6 & pcc < 0.7){ r1 = 0.6; r2 = 0.7 }
    if(pcc >= 0.5 & pcc < 0.6){ r1 = 0.5; r2 = 0.6 }
    
    ####
    mon.all.edges <- mon_pval0[(abs(mon_pval0$cor) >= r1 & abs(mon_pval0$cor) < r2),]
    mon.hh.edges <- mon.all.edges[(grepl(pattern = "h_OG", as.character(mon.all.edges$gene1)) & grepl(pattern = "h_OG", as.character(mon.all.edges$gene2))),]
    mon.pp.edges <- mon.all.edges[(grepl(pattern = "p_OG", as.character(mon.all.edges$gene1)) & grepl(pattern = "p_OG", as.character(mon.all.edges$gene2))),]
    mon.hp.edges <- mon.all.edges[((grepl(pattern = "h_OG", as.character(mon.all.edges$gene1)) & grepl(pattern = "p_OG", as.character(mon.all.edges$gene2))) | (grepl(pattern = "p_OG", as.character(mon.all.edges$gene1)) & grepl(pattern = "h_OG", as.character(mon.all.edges$gene2)))),]
    
    mon.hh.h.nodes <- unique(c(unique(as.character(mon.hh.edges$gene1))), c(unique(as.character(mon.hh.edges$gene2))))
    mon.pp.p.nodes <- unique(c(unique(as.character(mon.pp.edges$gene1))), c(unique(as.character(mon.pp.edges$gene2))))
    
    mon.hp.h.nodes.col1 <- unique(as.character(mon.hp.edges$gene1))
    mon.hp.p.nodes.col1 <- unique(as.character(mon.hp.edges$gene2))
    
    ####
    hum.all.edges <- hum_pval0[(abs(hum_pval0$cor) >= r1 & abs(hum_pval0$cor) < r2),]
    hum.hh.edges <- hum.all.edges[(grepl(pattern = "h_OG", as.character(hum.all.edges$gene1)) & grepl(pattern = "h_OG", as.character(hum.all.edges$gene2))),]
    hum.pp.edges <- hum.all.edges[(grepl(pattern = "p_OG", as.character(hum.all.edges$gene1)) & grepl(pattern = "p_OG", as.character(hum.all.edges$gene2))),]
    hum.hp.edges <- hum.all.edges[((grepl(pattern = "h_OG", as.character(hum.all.edges$gene1)) & grepl(pattern = "p_OG", as.character(hum.all.edges$gene2))) | (grepl(pattern = "p_OG", as.character(hum.all.edges$gene1)) & grepl(pattern = "h_OG", as.character(hum.all.edges$gene2)))),]
    
    hum.hh.h.nodes <- unique(c(unique(as.character(hum.hh.edges$gene1))), c(unique(as.character(hum.hh.edges$gene2))))
    hum.pp.p.nodes <- unique(c(unique(as.character(hum.pp.edges$gene1))), c(unique(as.character(hum.pp.edges$gene2))))
    
    hum.hp.h.nodes.col1 <- unique(as.character(hum.hp.edges$gene1))
    hum.hp.p.nodes.col1 <- unique(as.character(hum.hp.edges$gene2))
    
    ####
    common.all.edges <- inner_join(mon.all.edges, hum.all.edges, by = c("gene1", "gene2"))
    common.hh.edges <- inner_join(mon.hh.edges, hum.hh.edges, by = c("gene1", "gene2"))
    common.pp.edges <- inner_join(mon.pp.edges, hum.pp.edges, by = c("gene1", "gene2"))
    common.hp.edges <- inner_join(mon.hp.edges, hum.hp.edges, by = c("gene1", "gene2"))
    common.hh.h.nodes <- unique(c(mon.hh.h.nodes, hum.hh.h.nodes))
    common.pp.p.nodes <- unique(c(mon.pp.p.nodes, hum.pp.p.nodes))
    common.hp.h.nodes <- unique(c(mon.hp.h.nodes.col1, hum.hp.h.nodes.col1))
    common.hp.p.nodes <- unique(c(mon.hp.p.nodes.col1, hum.hp.p.nodes.col1))
    
    df[a,2] <- pcc
    df[a,3] <- nrow(common.all.edges)
    df[a,4] <- nrow(common.hh.edges)
    df[a,5] <- nrow(common.pp.edges)
    df[a,6] <- nrow(common.hp.edges)
    df[a,7] <- length(common.hh.h.nodes)
    df[a,8] <- length(common.pp.p.nodes)
    df[a,9] <- length(common.hp.h.nodes)
    df[a,10] <- length(common.hp.p.nodes)

    a = a+1
  }
  return(df)
}

df_common_study <- rbind(common_edges_and_nodes(0.9), 
                         common_edges_and_nodes(0.8), 
                         common_edges_and_nodes(0.7),
                         common_edges_and_nodes(0.6),
                         common_edges_and_nodes(0.5))

save(df_common_study, file = "df_common_study.RData")
colnames(df_common_study) <- c("Perms", "cor", "all.edges", "hh.edges", "pp.edges", "hp.edges", "hh.h.nodes", "pp.p.nodes", "hp.h.nodes", "hp.p.nodes")
df_common_melt <- melt(df_common_study, id = c("Perms", "cor"))
colnames(df_common_melt) <- c("Perms", "cor", "edge.node.type", "count")

#edge.node.plot <- ggplot(df_individual_melt, aes(x = Perms, y = count, colour = factor(cor))) +
#                         geom_line() + scale_x_continuous(breaks = seq(10000, 100000, 25000), limits = c(10000, 100000))+
#                         theme_bw() +
#                         facet_wrap(. ~ edge.node.type, scales="free_y") + ggtitle("SRP118996: Number of edges/nodes with permute score == 0")

#ggsave(plot = edge.node.plot, filename = "edge.node.plot.png")

com.edges.df <- df_common_melt[grep(pattern = "edge", df_common_melt$edge.node.type),]
com.nodes.df <- df_common_melt[grep(pattern = "node", df_common_melt$edge.node.type),]

com.edge.plot <- ggplot(com.edges.df, aes(x = Perms, y = log10(count), colour = factor(cor))) +
                         geom_line() + scale_x_continuous(breaks = seq(10000, 100000, 25000), limits = c(10000, 100000))+
                         theme_bw() +
                         facet_wrap(. ~ edge.node.type, scales="free_y") + ggtitle("ERP106451 and SRP118996: Common edges with permutation score 0") +
                         xlab("Permutations")

ggsave(plot = com.edge.plot, filename = "com.edge.plot.png")

com.node.plot <- ggplot(com.nodes.df, aes(x = Perms, y = log10(count), colour = factor(cor))) +
                         geom_line() + scale_x_continuous(breaks = seq(10000, 100000, 25000), limits = c(10000, 100000))+
                         theme_bw() +
                         facet_wrap(. ~ edge.node.type, scales="free_y") + ggtitle("ERP106451 and SRP118996: Common nodes with permutation score 0") +
                         xlab("Permutations")
 

ggsave(plot = com.node.plot, filename = "com.node.plot.png")

########### make na.omit datasets: all edges with their permute scores ############

### all ###

sum <- matrix(rep(0, 17991*17991), nrow = 17991)

files <- grep(pattern = "outer_", list.files())
file.names <- list.files()[files]

for(i in 1:length(file.names))
{
  print(i)
  #setwd("/short/uv67/pm4655/cor/")
  if(grepl(pattern = ".RData", file.names[i]))
  {
    load(file.names[i])
    sum <- sum + outer 
  }
}

sum[is.na(sum)] <- 100000
all <- sum
all[lower.tri(all, diag = T)] <- NA
all_melt <- melt(all)
colnames(all_melt) <- c("gene1", "gene2", "permute_score")
all_na.omit <- na.omit(all_melt)
save(all_na.omit, file = paste0(studyID, "_", type, "_na.omit.RData", collapse = ''))
###

### intermwdiate (int) ###

sum <- matrix(rep(0, 17991*17991), nrow = 17991)

files <- grep(pattern = "outer_", list.files())
file.names <- list.files()[files]

for(i in 1:length(file.names))
{
  print(i)
  #setwd("/short/uv67/pm4655/cor/")
  if(grepl(pattern = ".RData", file.names[i]))
  {
    load(file.names[i])
    sum <- sum + outer 
  }
}

sum[is.na(sum)] <- 100000
int <- sum
int[lower.tri(int, diag = T)] <- NA
int_melt <- melt(int)
colnames(int_melt) <- c("gene1", "gene2", "permute_score")
int_na.omit <- na.omit(int_melt)
save(int_na.omit, file = paste0(studyID, "_", type, "_na.omit.RData", collapse = ''))

###

### stringent (str) ###

sum <- matrix(rep(0, 17991*17991), nrow = 17991)

files <- grep(pattern = "outer_", list.files())
file.names <- list.files()[files]

for(i in 1:length(file.names))
{
  print(i)
  #setwd("/short/uv67/pm4655/cor/")
  if(grepl(pattern = ".RData", file.names[i]))
  {
    load(file.names[i])
    sum <- sum + outer 
  }
}

  sum[is.na(sum)] <- 100000
  str <- sum
  str[lower.tri(str, diag = T)] <- NA
  str_melt <- melt(str)
  colnames(str_melt) <- c("gene1", "gene2", "permute_score")
  str_na.omit <- na.omit(str_melt)
  save(str_na.omit, file = paste0(studyID, "_", type, "_na.omit.RData", collapse = ''))

########### single study comparisons ###########

load("SRP116593_all_na.omit.RData")
load("SRP116593_int_na.omit.RData")
load("SRP116593_str_na.omit.RData")

study_all_datasets <- data.frame(int_na.omit[,1], int_na.omit[,2], 
                                 int_na.omit$permute_score, 
                                 str_na.omit$permute_score, 
                                 all_na.omit$permute_score)
colnames(study_all_datasets) <- c("gene1", "gene2", "SRP116593_int", "SRP116593_str", "SRP116593_all")

v <- which(study_all_datasets$SRP116593_int == 100000 | 
             study_all_datasets$SRP116593_str == 100000 | 
             study_all_datasets$SRP116593_all == 100000)

new_all <- study_all_datasets[-v,]
sampled <- new_all[sample(nrow(new_all), size = nrow(new_all)/1000),]

ERP_int <- -log10(1/(all_ERP106451_SRP118996$ERP106451_int + 5e-06))
ERP_str <- -log10(1/(all_ERP106451_SRP118996$ERP106451_str + 5e-06))
ERP_all <- -log10(1/(all_ERP106451_SRP118996$ERP106451_all + 5e-06))
SRP_int <- -log10(1/(all_ERP106451_SRP118996$SRP118996_int + 5e-06))
SRP_str <- -log10(1/(all_ERP106451_SRP118996$SRP118996_str + 5e-06))
SRP_all <- -log10(1/(all_ERP106451_SRP118996$SRP118996_all + 5e-06))

lt <- data.frame(gene1 = all_ERP106451_SRP118996$gene1, 
                 gene2 = all_ERP106451_SRP118996$gene2, 
                 ERP106451_nor = ERP_int, 
                 ERP106451_str = ERP_str, 
                 ERP106451_all = ERP_all, 
                 SRP118996_nor = SRP_int, 
                 SRP118996_str = SRP_str, 
                 SRP118996_all = SRP_all)

cor(study_all_datasets$SRP116593_int, study_all_datasets$SRP116593_str)
cor(study_all_datasets$SRP116593_int, study_all_datasets$SRP116593_all)
cor(study_all_datasets$SRP116593_str, study_all_datasets$SRP116593_all)

cor(study_all_datasets$SRP116593_int, study_all_datasets$SRP116593_str, method = "spearman")
cor(study_all_datasets$SRP116593_int, study_all_datasets$SRP116593_all, method = "spearman")
cor(study_all_datasets$SRP116593_str, study_all_datasets$SRP116593_all, method = "spearman")

########### UpSetR plots ######

ERP106451_all <- apply(ERP106451_allruns_bipartite[,c("gene1","gene2") ] , 1 , paste , collapse = "_" )
ERP106451_str <- apply(ERP106451_stringent15_bipartite[,c("gene1","gene2") ] , 1 , paste , collapse = "_" )
ERP106451_nor <- apply(ERP106451_bipartite[,c("gene1","gene2") ] , 1 , paste , collapse = "_" )

SRP118996_all <- apply(SRP118996_allruns_bipartite[,c("gene1","gene2") ] , 1 , paste , collapse = "_" )
SRP118996_str <- apply(SRP118996_stringent22_bipartite[,c("gene1","gene2") ] , 1 , paste , collapse = "_" )
SRP118996_nor <- apply(SRP118996_bipartite[,c("gene1","gene2") ] , 1 , paste , collapse = "_" )

library(grid)
all6datasets_upset = list(ERP106451_all = ERP106451_all, 
                          ERP106451_str = ERP106451_str,
                          ERP106451_nor = ERP106451_nor, 
                          SRP118996_all = SRP118996_all, 
                          SRP118996_str = SRP118996_str, 
                          SRP118996_nor = SRP118996_nor)

png(file="All6datasets_intersect.png", width = 25, height = 15, units = "cm", res = 450) # or other device; , onefile = F for pdf()
upset(fromList(all6datasets_upset), sets = names(all6datasets_upset), order.by = "freq",  mainbar.y.label = "Genes pairs in intersections", sets.x.label = "Genes pairs per dataset", text.scale = c(1.2, 0.8, 0.8, 0.8, 0.8, 0.75))
# empty.intersections = "on", main.bar.color = "darkblue", sets.bar.color=c("maroon"), matrix.color="darkgreen", )
grid.text("SRP118996 and ERP106451 datasets",x = 0.65, y=0.95, gp=gpar(fontsize=10))
dev.off()


########### script to get annotation table for heatmaps #########
# can do this on the local computer or on the server 

loadRData <- function(fileName){
  #loads an RData file, and returns it
  load(fileName)
  get(ls()[ls() != "fileName"])
}

setwd("/home/parnika/Documents/Data/")
library(dplyr)
allHPexp <- read.delim("allHPexp.txt", sep = ',', stringsAsFactors = F)
colnames(allHPexp)

# vector of datasets
datasets <- c("DRP000987.ortho.data.all", "DRP000987.ortho.data.int", "DRP000987.ortho.data.str", 
              "ERP106451.ortho.data.all", "ERP106451.ortho.data.int", "ERP106451.ortho.data.str",
              "ERP023982.ortho.data.all", "ERP023982.ortho.data.int", "ERP023982.ortho.data.str",
              "ERP004598.ortho.data.all", "ERP004598.ortho.data.int", "ERP004598.ortho.data.str",
              "ERP110375.ortho.data.all", "ERP110375.ortho.data.int", "ERP110375.ortho.data.str",
              "SRP118996.ortho.data.all", "SRP118996.ortho.data.int", "SRP118996.ortho.data.str",
              "SRP118827.ortho.data.all", "SRP118827.ortho.data.int", "SRP118827.ortho.data.str",
              "SRP116593.ortho.data.all", "SRP116593.ortho.data.int", "SRP116593.ortho.data.str",
              "SRP116793.ortho.data.all", "SRP116793.ortho.data.int", "SRP116793.ortho.data.str"
)

rn <- c("DRP000987_all", "DRP000987_int", "DRP000987_str", 
        "ERP106451_all", "ERP106451_int", "ERP106451_str",
        "ERP023982_all", "ERP023982_int", "ERP023982_str",
        "ERP004598_all", "ERP004598_int", "ERP004598_str",
        "ERP110375_all", "ERP110375_int", "ERP110375_str",
        "SRP118996_all", "SRP118996_int", "SRP118996_str",
        "SRP118827_all", "SRP118827_int", "SRP118827_str",
        "SRP116593_all", "SRP116593_int", "SRP116593_str",
        "SRP116793_all", "SRP116793_int", "SRP116793_str"
)

anno <- data.frame()

for(i in 1:length(datasets))
{
  ds <- loadRData(paste0("DataSubsets/",datasets[i],".RData"))
  runs <- sapply(colnames(ds), function(x) strsplit(x, split = "_")[[1]][1])
  
  pp <- sapply(runs, function(x) allHPexp[which(allHPexp$RunID==x),"Parasite_percent"])
  pp_median <- median(pp)
  
  host <- as.character(allHPexp[which(allHPexp$RunID==runs[1]),"Host"])
  parasite <- as.character(allHPexp[which(allHPexp$RunID==runs[1]),"Parasite"])
  
  anno[i,1] <- datasets[i]
  anno[i,2] <- host
  anno[i,3] <- parasite
  anno[i,4] <- pp_median
  anno[i,5] <- rn[i]
}

rownames(anno) <- anno[,5]
anno <- anno[,c(2,3,4)]
colnames(anno) <- c("Host", "Parasite", "Median_parasite_percent")
write.table(anno, "anno.txt", sep = '\t', row.names = T)
save(anno, file = "anno.RData")
saveRDS(anno, file = "anno.rds")


########### Function to produce comparison matrices #########

studyID <- c("ERP106451", "SRP118996", "SRP118827", "SRP116793", "SRP116593", "DRP000987", "ERP023982", "ERP004598", "ERP110375")
Cross_study_comparison <- function(feature, op)
{
  datasets <- c()
  v <- c("_str", "_int", "_all")
  datasets <- sapply(studyID, function(x) c(datasets, paste0(x, v))) # gives a matrix
  # feature:
  # a_edges == all edges; b_edges == bipartite edges; h_edges; p_edges
  # op:
  # cor (Pearson's and Spearman); overlap; sig
  if(feature == "a_edges")
  {
    list_ds <- list()
    l <- 0
    for(i in 1:length(studyID))
    {
      for(j in 1:3)
      {
        study <- colnames(datasets)[i]
        ds <- loadRData(paste0("/SAN/Plasmo_compare/SRAdb/Output/", studyID[i], "/cor/", datasets[j,study],
                               "_na.omit.RData"))
        # ds$edge <- apply(ds[,c("gene1","gene2") ] , 1 , paste , collapse = "_" )
        # ds$edge <- paste0(ds$gene1, ds$gene2)
        # ds <- data.frame(edge = ds$edge, permute_score = ds$permute_score)
        colnames(ds) <- sapply(colnames(ds), function(x) paste0(datasets[j,study],"_",x))
        list_ds[[paste0(datasets[j,study], "_",feature)]] <- ds
        l <- length(list_ds)
      }
    }
  }
  if(feature == "b_edges")
  {
      list_ds <- list()
      l <- 0
      for(i in 1:length(studyID))
      {
        for(j in 1:3)
        {
          study <- colnames(datasets)[i]
          ds <- loadRData(paste0("/SAN/Plasmo_compare/SRAdb/Output/", studyID[i], "/cor/", datasets[j,study],
                                 "_na.omit.RData"))
          # keep only bipartite edges
          ds <- ds[(grepl(pattern = "h_OG", ds$gene1) & grepl(pattern = "p_OG", ds$gene2)) |
                               (grepl(pattern = "p_OG", ds$gene1) & grepl(pattern = "h_OG", ds$gene2)),]
          colnames(ds) <- sapply(colnames(ds), function(x) paste0(datasets[j,study],"_", feature, "_", x))
          
          list_ds[[paste0(datasets[j,study], "_",feature)]] <- ds
          l <- length(list_ds)
        }
      }
  }
  if(feature == "h_edges")
    {
        find = "h_OG"
        
        list_ds <- list()
        l <- 0
        for(i in 1:length(studyID))
        {
          #for(j in 1:3)
          #{
            study <- colnames(datasets)[i]
            #ds <- loadRData(paste0("/SAN/Plasmo_compare/SRAdb/Output/", studyID[i], "/cor/", datasets[j,study],
             #                      "_na.omit.RData"))
            ds <- loadRData(paste0("/SAN/Plasmo_compare/SRAdb/Output/", studyID[i], "/cor/", datasets[i],
                                                       "_na.omit.RData"))
            # keep only bipartite edges
            ds <- ds[(grepl(pattern = find, ds$gene1) & grepl(pattern = find, ds$gene2)),]
            colnames(ds) <- sapply(colnames(ds), function(x) paste0(datasets[i],"_", feature, "_", x))
            
            list_ds[[paste0(datasets[i], "_",feature)]] <- ds
            l <- length(list_ds)
          #}
        }
  }
  if(feature == "p_edges")
  {
    find = "p_OG"
    
    list_ds <- list()
    l <- 0
    for(i in 1:length(studyID))
    {
      for(j in 1:3)
      {
        study <- colnames(datasets)[i]
        ds <- loadRData(paste0("/SAN/Plasmo_compare/SRAdb/Output/", studyID[i], "/cor/", datasets[j,study],
                               "_na.omit.RData"))
        # keep only bipartite edges
        ds <- ds[(grepl(pattern = find, ds$gene1) & grepl(pattern = find, ds$gene2)),]
        colnames(ds) <- sapply(colnames(ds), function(x) paste0(datasets[j,study],"_", feature, "_", x))
        
        list_ds[[paste0(datasets[j,study], "_",feature)]] <- ds
        l <- length(list_ds)
      }
    }
  }
  operations(data = list_ds, op = op, feature = feature)
}

# function doing the operations, to be called by Cross_study_comparison function 

operations <- function(data, op, feature)
{
  # takes 2 columns per study: edge and permute score for cor
  # takes 1 column of gene per study for overlap
  if(op == "cor")
  {
    df <- data.frame(gene1 = data[[1]][,1], gene2 = data[[1]][,2])
    for(i in 1:length(data))
    {
      df[(1:nrow(df)),(i+2)] <- data[[i]][,3]
      colnames(df)[(i+2)] <- names(data)[[i]]
    }
    
    # remove.rows <- which(100000 %in% df[,3:17])
    # rr <- subset(df, df[,3:17] != 100000)
    rr <- df[!apply(df[, 3:17], 1, function(x) any(x == 100000)), ]
          
    # df <- df[-remove.rows,]
    sampled <- rr[sample(nrow(rr), size = nrow(rr)/1000),]
    
    logt_df <- data.frame(gene1 = sampled[,1], gene2 = sampled[,2])
    
    for(j in 1:length(data))
      logt_df[(1:nrow(logt_df)),(j+2)] <- -log10(1/(sampled[,(j+2)] + 5e-06))
        
    colnames(logt_df) <- names(sampled)
    colnames(logt_df)[3:ncol(logt_df)] <- sapply(colnames(logt_df)[3:ncol(logt_df)], function(x) paste0("_logt_",x))
    colnames(logt_df)[3:ncol(logt_df)] <- substring(colnames(logt_df)[3:ncol(logt_df)], 1 , 27)
    
    p_cor <- cor(rr[,(3:ncol(rr))])
    s_cor <- cor(rr[,(3:ncol(rr))], method = "spearman")
    save(p_cor, file = paste0(feature, "_p_cor_all_datasets_for_vis.RData"))
    save(s_cor, file = paste0(feature, "_s_cor_all_datasets_for_vis.RData"))
    save(logt_df, file = paste0(feature, "_logt_all_datasets_for_vis.RData"))
    write.table(p_cor,  paste0(feature, "_p_cor_all_datasets_for_vis.txt"), sep = '\t', row.names = T)
    write.table(s_cor,  paste0(feature, "_s_cor_all_datasets_for_vis.txt"), sep = '\t', row.names = T)
    write.table(logt_df,  paste0(feature, "_logt_df_all_datasets_for_vis.txt"), sep = '\t', row.names = T)
      
    res <- list(p_cor, s_cor, logt_df)
  }
  
  if(op == "overlap")
  {
        feature = feature
        m <- length(data)
        n <- ncol(data[[1]])
        
        upset <- list()
        mat <- matrix(rep(0, (length(data)^2)), nrow = length(data), ncol = length(data))
         
        if(n==3)
        {
          # finding intersecting edges
          for(i in 1:length(data))
          {
            upset[[i]] <- data[[i]][which(data[[i]][,3] == 0),1:2]
            upset[[i]] <- paste(upset[[i]][,1], upset[[i]][,2], sep = '_')
          }
          names(upset) <- names(data)
          for(i in 1:length(upset))
            for(j in 1:length(upset))
              mat[i,j] <- 2*length(intersect(upset[[i]], upset[[j]]))/(length(upset[[i]]) + length(upset[[j]]))
          rownames(mat) <- colnames(mat) <- names(upset)
          save(mat, file = paste0(feature, "b_overlap_matrix_all_datasets.RData"))
          save(upset, file =  paste0(feature,"b_overlap_upset_all_datasets.RData"))
          write.table(mat,  paste0(feature, "b_overlap_matrix_all_datasets.txt"), sep = '\t', row.names = T)
          
          mat1 <- matrix(rep(0, (length(data)^2)), nrow = length(data), ncol = length(data))
          
          for(i in 1:length(upset))
            for(j in 1:length(upset))
              mat1[i,j] <- length(intersect(upset[[i]], upset[[j]]))
          rownames(mat1) <- colnames(mat1) <- names(upset)
          save(mat1, file = paste0(feature, "b_overlap_raw_numbers_matrix_all_datasets.RData"))
          write.table(mat1,  paste0(feature, "b_overlap_raw_numbers_matrix_all_datasets.txt"), sep = '\t', row.names = T)
    }
    
    if(n==1)
    {
      # finding intersecting genes
      upset <- data
      names(upset) <- names(data)
      for(i in 1:length(data))
        for(j in 1:length(data))
          mat[i,j] <- 2*length(intersect(data[[i]][,1], data[[j]][,1]))/(nrow(data[[i]]) + nrow(data[[j]]))
      
      rownames(mat) <- colnames(mat) <- names(upset)
      save(mat, file = paste0(feature, "_overlap_matrix_all_datasets.RData"))
      save(upset, file =  paste0(feature,"_overlap_upset_all_datasets.RData"))
      write.table(mat,  paste0(feature, "_overlap_matrix_all_datasets.txt"), sep = '\t', row.names = T)
     }
    res <- list(upset, mat)
  }
  
  if(op == "sig")
  {
    feature = feature
    m <- length(data)
    n <- ncol(data[[1]])
    
    sig <- data.frame()
    a = 1
    upset <- list()
    
    # finding intersecting edges
    for(i in 1:length(data))
    {
      upset[[i]] <- data[[i]][which(data[[i]][,3] == 0),1:2] # edges with ISIGEM score 0
      upset[[i]] <- paste(upset[[i]][,1], upset[[i]][,2], sep = '_')
    }
    names(upset) <- names(data)
    system.time(
    for(i in 1:length(upset))
    {
      U1 = nrow(data[[i]][which(data[[i]][,3] != 100000),])
      for(j in 1:length(upset))
      {
        U2 = nrow(data[[j]][which(data[[j]][,3] != 100000),])
        U = U1 + U2
        X = length(union(upset[[i]], upset[[j]]))
        Y = length(setdiff(upset[[i]],upset[[j]]))
        W = length(setdiff(upset[[j]],upset[[i]]))
        Z = length(intersect(upset[[i]], upset[[j]]))
        
        significance <- fisher.test(matrix(c(U-X, Y, W, Z), nrow=2), alternative = "greater")
        
        sig[a,1] <- names(upset)[i]
        sig[a,2] <- length(upset[[i]])
        sig[a,3] <- names(upset)[j]
        sig[a,4] <- length(upset[[j]])
        sig[a,5] <- U
        sig[a,6] <- Z
        sig[a,7] <- significance$p.value
        
        a = a+1
      }
        
    })
    
    colnames(sig) <- c("Set1","Set1_edges#", "Set2", "Set2_edges#", "Universe_size", "Intersection_size", "pvalue")
    padj <- p.adjust(sig[,7], method = "BH")
    sig$p.adj <- padj
    
    #cast the df into a matrix
    sig.mat <- reshape(sig[,c(1,3,8)], timevar = "Set1", idvar = "Set2", direction = "wide")
    rownames(sig.mat) <- sig.mat[,1]
    sig.mat <- sig.mat[,-1]
    colnames(sig.mat) <- substring(colnames(sig.mat),7, 19)
    rownames(sig.mat) <- substring(rownames(sig.mat), 1, 13)
    logt.sig.mat <- log10(1/(sig.mat + 1e-5))
    logt.sig.mat <- logt.sig.mat[c("SRP118827_all", "SRP116793_all", "SRP118827_int", "SRP116793_int", "SRP118996_all", "ERP110375_str",
                                   "ERP110375_int", "SRP116793_str", "SRP118996_str", "SRP118996_int", "ERP004598_all", "ERP004598_str",
                                   "ERP004598_int", "SRP118827_str", "DRP000987_str", "ERP106451_str", "ERP106451_int", "ERP106451_all",
                                   "ERP023982_all", "ERP110375_all", "DRP000987_int", "DRP000987_all", "SRP116593_int", "SRP116593_all",
                                   "SRP116593_str", "ERP023982_str", "ERP023982_int"), 
                                 c("SRP118827_all", "SRP116793_all", "SRP118827_int", "SRP116793_int", "SRP118996_all", "ERP110375_str",
                                   "ERP110375_int", "SRP116793_str", "SRP118996_str", "SRP118996_int", "ERP004598_all", "ERP004598_str",
                                   "ERP004598_int", "SRP118827_str", "DRP000987_str", "ERP106451_str", "ERP106451_int", "ERP106451_all",
                                   "ERP023982_all", "ERP110375_all", "DRP000987_int", "DRP000987_all", "SRP116593_int", "SRP116593_all",
                                   "SRP116593_str", "ERP023982_str", "ERP023982_int")]
    
    save(sig, file = paste0(feature, "_overlap_signif_all_datasets.RData"))
    write.table(sig,  paste0(feature, "_overlap_signif_all_datasets.txt"), sep = '\t', row.names = T)
    save(sig.mat, file = paste0(feature, "_overlap_signif_all_datasets_matrix.RData"))
    write.table(sig.mat,  paste0(feature, "_overlap_signif_all_datasets_matrix.txt"), sep = '\t', row.names = T)
    save(logt.sig.mat, file = paste0(feature, "_logt_overlap_signif_all_datasets_matrix.RData"))
    
  }
  return(res)
}

Cross_study_comparison(feature = "b_edges", op = "cor")

########### plot overlap matrices #####
  
load("~/Documents/Data/p_edgespp_overlap_raw_numbers_matrix_all_datasets.RData")
anno <- read.delim("~/Documents/Data/anno.txt", stringsAsFactors=FALSE)
colnames(mat1) <- substring(colnames(mat1), 1, 13)
rownames(mat1) <- substring(rownames(mat1), 1, 13)

# remove ERP023982_str row

anno <- anno[-which(rownames(anno)=="ERP023982_str"),]
mat <- mat1[-which(rownames(mat)=="ERP023982_str"),]
mat <- mat1[,-which(colnames(mat)=="ERP023982_str")]

pdf("pheatmap_b_edges_overlap_6_datasets.pdf")
pheatmap::pheatmap(log10(mat1+1), annotation_row = anno, 
                   fontsize = 8, 
                   main = "Log10 intersection size (bipartite edges)",
                   cluster_cols = T, cluster_rows = T) #-log10(1/(sig.mat + 1e-06))
dev.off()

# test = matrix(rnorm(200), 20, 10)
# test[1:10, seq(1, 10, 2)] = test[1:10, seq(1, 10, 2)] + 3
# test[11:20, seq(2, 10, 2)] = test[11:20, seq(2, 10, 2)] + 2
# test[15:20, seq(2, 10, 2)] = test[15:20, seq(2, 10, 2)] + 4
# colnames(test) = paste("Test", 1:10, sep = "")
# rownames(test) = paste("Name", 1:20, sep = "")
# 
# paletteLength <- 50
# myColor <- colorRampPalette(c("yellow", "white", "blue"))(paletteLength)
# # length(breaks) == length(paletteLength) + 1
# # use floor and ceiling to deal with even/odd length pallettelengths
# myBreaks <- c(seq(min(logt.sig.mat), 0, length.out=ceiling(paletteLength/2) + 1), 
#               seq(max(logt.sig.mat)/paletteLength, max(logt.sig.mat), length.out=floor(paletteLength/2)))

# Plot the heatmap  
pheatmap::pheatmap(logt.sig.mat, color=myColor, breaks=myBreaks)

########### upset plots #####

all_datasets_upset = upset

png(file="bipartite_6_intersect.png", width = 25, height = 15, units = "cm", res = 450) # or other device; , onefile = F for pdf()
upset(fromList(all_datasets_upset), sets = names(all_datasets_upset), set_size.angles = 90, number.angles = 90, 
      scale.intersections = "log10",
      scale.sets = "log10",
      order.by = "freq",  mainbar.y.label = "Genes pairs in intersections", 
      sets.x.label = "Genes pairs per dataset", text.scale = c(1.2, 0.8, 0.8, 0.8, 0.6, 0.75),mb.ratio = c(0.55, 0.45))
# empty.intersections = "on", main.bar.color = "darkblue", sets.bar.color=c("maroon"), matrix.color="darkgreen", )
grid.text("Bipartite edges 6 datasets",x = 0.65, y=0.95, gp=gpar(fontsize=10))
dev.off()

################# repetition of drop plots ###############

ds <- c("SRP118827_all", "SRP116793_all", "SRP118827_int", "SRP116793_int", "SRP118996_all", "ERP110375_str",
        "ERP110375_int", "SRP116793_str", "SRP118996_str", "SRP118996_int", "ERP004598_all", "ERP004598_str",
        "ERP004598_int", "SRP118827_str", "DRP000987_str", "ERP106451_str", "ERP106451_int", "ERP106451_all",
        "ERP023982_all", "ERP110375_all", "DRP000987_int", "DRP000987_all", "SRP116593_int", "SRP116593_all",
        "SRP116593_str", "ERP023982_str", "ERP023982_int")


number_of_edges_and_nodes <- function(pcc)
{
  for(f in 1:length(ds))
  {
    #setwd(paste0("/SAN/Plasmo_compare/SRAdb/Output/", ds[f], "/cor/ds/", collapse = ''))
    #system(paste0("tar -xvf ",ds[f],".tar"))
    
    study <- strsplit(ds[f], split = "_")[[1]][1]
    type <- strsplit(ds[f], split = "_")[[1]][2]
      
    files <- grep(pattern = "outer_", list.files())
    file.names <- list.files()[files]
    
    sum2 <- matrix(rep(0, 17991*17991), nrow = 17991)
    sum2[lower.tri(sum2, diag = T)] <- NA
    df <- data.frame(Perms = seq(10000, 100000, 10000))
    a = 1
    
    study <- loadRData(paste0("/SAN/Plasmo_compare/SRAdb/Output/",study,"/cor/", study,".ortho.data.",type,".RData", collapse = ''))
    study <- t(study)
    ori_cor <- cor(study, use = "pairwise.complete.obs")
    ori_cor[lower.tri(ori_cor, diag = T)] <- NA
    cor_melt <- melt(ori_cor)
    colnames(cor_melt) <- c("gene1", "gene2", "cor")
    
    for(i in 1:length(file.names))
    {
      print(i)
      if(grepl(pattern = ".RData", file.names[i]))
      {
        load(file.names[i])
        sum2 <- outer + sum2
        sum2_melt <- melt(sum2)
        
        colnames(sum2_melt) <- c("gene1", "gene2", "permute_score")
        
        pval_cor <- cbind(cor_melt, sum2_melt$permute_score)
        colnames(pval_cor)[4] <- "permute_score"
        
        pval_cor_na.omit <- na.omit(pval_cor)
        pval0 <- pval_cor_na.omit[pval_cor_na.omit$permute_score==0,]
        
        if(pcc >= 0.9){ r1 = 0.9; r2 = 1.0 }
        if(pcc >= 0.8 & pcc < 0.9){ r1 = 0.8; r2 = 0.9 }
        if(pcc >= 0.7 & pcc < 0.8){ r1 = 0.7; r2 = 0.8 }
        if(pcc >= 0.6 & pcc < 0.7){ r1 = 0.6; r2 = 0.7 }
        if(pcc >= 0.5 & pcc < 0.6){ r1 = 0.5; r2 = 0.6 }
        
        all.edges <- pval0[(abs(pval0$cor) >= r1 & abs(pval0$cor) < r2),]
        all.edges.number <- nrow(all.edges)
        hh.edges <- all.edges[(grepl(pattern = "h_OG", as.character(all.edges$gene1)) & grepl(pattern = "h_OG", as.character(all.edges$gene2))),]
        hh.edges.number <- nrow(hh.edges)
        pp.edges <- all.edges[(grepl(pattern = "p_OG", as.character(all.edges$gene1)) & grepl(pattern = "p_OG", as.character(all.edges$gene2))),]
        pp.edges.number <- nrow(pp.edges)
        hp.edges <- all.edges[((grepl(pattern = "h_OG", as.character(all.edges$gene1)) & grepl(pattern = "p_OG", as.character(all.edges$gene2))) | (grepl(pattern = "p_OG", as.character(all.edges$gene1)) & grepl(pattern = "h_OG", as.character(all.edges$gene2)))),]
        hp.edges.number <- nrow(hp.edges)
        
        hh.h.nodes <- unique(c(unique(as.character(hh.edges$gene1))), c(unique(as.character(hh.edges$gene2))))
        pp.p.nodes <- unique(c(unique(as.character(pp.edges$gene1))), c(unique(as.character(pp.edges$gene2))))
        
        hp.h.nodes.col1 <- unique(as.character(hp.edges$gene1))
        # if(length(hp.h.nodes.col1) > 0 & length(hp.h.nodes.col2) > 0)
        #   hp.h.nodes <- unique(hp.h.nodes.col1, hp.h.nodes.col2)
        # if(length(hp.h.nodes.col1) > 0 & length(hp.h.nodes.col2) == 0)
        #   hp.h.nodes <- unique(hp.h.nodes.col1)
        # if(length(hp.h.nodes.col2) > 0 & length(hp.h.nodes.col1) == 0)
        hp.h.nodes <- length(hp.h.nodes.col1)
        
        hp.p.nodes.col1 <- unique(as.character(hp.edges$gene2))
        # hp.p.nodes.col2 <- unique(as.character(grep(pattern = "p_OG",hp.edges$gene2)))
        # if(length(hp.p.nodes.col1) > 0 & length(hp.p.nodes.col2) > 0)
        #   hp.p.nodes <- unique(hp.p.nodes.col1, hp.p.nodes.col2)
        # if(length(hp.p.nodes.col1) > 0 & length(hp.p.nodes.col2) == 0)
        #   hp.p.nodes <- unique(hp.p.nodes.col1)
        # if(length(hp.p.nodes.col2) > 0 & length(hp.p.nodes.col1) == 0)
        hp.p.nodes <- length(hp.p.nodes.col1)
        
        df[a,2] <- pcc
        df[a,3] <- all.edges.number
        df[a,4] <- hh.edges.number
        df[a,5] <- pp.edges.number
        df[a,6] <- hp.edges.number
        df[a,7] <- length(hh.h.nodes)
        df[a,8] <- length(pp.p.nodes)
        df[a,9] <- hp.h.nodes
        df[a,10] <- hp.p.nodes
        
        a = a+1
      }
    }
    #system("rm outer*.RData")
  }
  return(df)
}
nodes_and_edges <- rbind(number_of_edges_and_nodes(0.9), 
                         number_of_edges_and_nodes(0.8), 
                         number_of_edges_and_nodes(0.7),
                         number_of_edges_and_nodes(0.6),
                         number_of_edges_and_nodes(0.5))


################ intersections between overall dataset and individual datasets ###############
studies <- c("DRP000987_str", "ERP106451_int", "ERP110375_int", 
             "ERP004598_all", "SRP118827_int", "SRP116793_all")
library(dplyr)
allHPexp <- read.delim("/SAN/Plasmo_compare/SRAdb/Output/allHPexp.txt", sep = ',')
colnames(allHPexp)

bip_intersect_list <- list()
#load("/SAN/Plasmo_compare/SRAdb/Output/df_allhosts_concat/df_allhosts_concat.")
# paste the host and parasite genes and put them in one column. The other column in the cor coef
hp <- paste(bipartite[,1], bipartite[,2], sep = "_")

# overall is the dataset with all the bipartite edges with score 0
overall <- data.frame(edge = hp, cor = bipartite[,3])
rm(bipartite)
rm(hp)

for(i in 1:length(studies))
{
  print(i)
  studyID <- strsplit(studies[i], split = "_")[[1]][1]
  type <- strsplit(studies[i], split = "_")[[1]][2]
  study <- loadRData(paste0("/SAN/Plasmo_compare/SRAdb/Output/", studyID,
                            "/cor/", studyID, "_", type, "_bipartite.RData"))
  
  hp <- paste(study[,1], study[,2], sep = "_")
  study_df <- data.frame(edge = hp, cor = study[,3])
  rm(study)
  rm(hp)
  
  host <- as.character(unique(allHPexp[which(allHPexp$Study==studyID),"Host"]))
  para <- as.character(unique(allHPexp[which(allHPexp$Study==studyID),"Parasite"]))
  intersection <- as.character(intersect(as.character(overall$edge), as.character(study_df$edge)))
  Cor_in_subset <- sapply(intersection, function(x) study_df[which(study_df$edge==x), "cor"])
  Cor_in_overall <- sapply(intersection, function(x) overall[which(overall$edge==x), "cor"])
  
  bip_intersect_list[[studies[i]]] <- list(host = host, para = para, intersection = intersection, Cor_in_subset = Cor_in_subset, Cor_in_overall = Cor_in_overall)
}

save(bip_intersect_list, file = "bip_intersect_list.RData")


  
